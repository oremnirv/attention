import numpy as np
import matplotlib.pyplot as plt
plt.style.use('ggplot')

def sample_plot_w_training(positions, targets, predictions, num_context = 50, num_samples = 1, title = ''):
    real_x = positions
    real_y = targets
    samples = np.zeros((num_samples, len(real_x)))
    samples[0, :(num_context - 1)] = targets[:(num_context - 1)]
    samples[0, (num_context - 1):] = predictions[(num_context - 1):]
    sorted_arr = np.argsort(real_x)
    plt.plot(real_x[sorted_arr], real_y[sorted_arr], 'black')
    plt.scatter(real_x[:num_context], real_y[:num_context], c = 'black', marker = "o", zorder = 1, s= 25)
    plt.plot(real_x[sorted_arr], samples[0, sorted_arr], c = 'lightskyblue', alpha = 0.6)
    plt.title(title)
    plt.show()

# Show few graphs of how the data looks like
def plot_examples(x, y):
    idx = np.random.choice(np.arange(0, len(x)), 6, replace = False)
    for i in idx: 
        sorted_idx = np.argsort(x[i, :])
        plt.plot(x[i, sorted_idx], y[i, sorted_idx])
    plt.title('Five examples from the dataset generated by a GP \n with RBF kernel with Ïƒ = 1')



def follow_training_plot(x_tr, y_tr, pred, 
                         x_te, y_te, pred_te, num_context = 50, num_samples = 2):
    fig, axs = plt.subplots(2, 2, figsize=(10,6))
    tr_idx = np.random.choice(np.arange(0, len(x_tr)), 2, replace = False)
    te_idx = np.random.choice(np.arange(0, len(x_te)), 2, replace = False)
    samples_tr = np.zeros((num_samples, x_tr.shape[1]))
    samples_te = np.zeros((num_samples, x_te.shape[1]))
    sorted_idx_tr = np.argsort(x_tr[tr_idx[0], :])
    sorted_idx_tr2 = np.argsort(x_tr[tr_idx[1], :])
    sorted_idx_te = np.argsort(x_te[te_idx[0], :])
    sorted_idx_te2 = np.argsort(x_te[te_idx[1], :])
    samples_tr[0, :(num_context - 1)] = y_tr[tr_idx[0], :(num_context - 1)]
    samples_tr[0, (num_context - 1):] = pred[tr_idx[0], (num_context - 1):]
    samples_tr[1, :(num_context - 1)] = y_tr[tr_idx[1], :(num_context - 1)]
    samples_tr[1, (num_context - 1):] = pred[tr_idx[1], (num_context - 1):]
    samples_te[0, :(num_context - 1)] = y_te[te_idx[0], :(num_context - 1)]
    samples_te[0, (num_context - 1):] = pred_te[te_idx[0], (num_context - 1):]
    samples_te[1, :(num_context - 1)] = y_te[te_idx[1], :(num_context - 1)]
    samples_te[1, (num_context - 1):] = pred_te[te_idx[1], (num_context - 1):]
    axs[0, 0].plot(x_tr[tr_idx[0], sorted_idx_tr], y_tr[tr_idx[0], sorted_idx_tr], 'black')
    axs[0, 0].scatter(x_tr[tr_idx[0], :num_context], y_tr[tr_idx[0], :num_context], c = 'black', marker = "o", zorder = 1, s= 25)
    axs[0, 0].plot(x_tr[tr_idx[0], sorted_idx_tr], samples_tr[0, sorted_idx_tr], c = 'lightskyblue', alpha = 0.6)
    axs[0, 0].set_title('Training ex. I')
    axs[0, 1].plot(x_tr[tr_idx[1], sorted_idx_tr2], y_tr[tr_idx[1], sorted_idx_tr2], 'black', label = 'true function')
    axs[0, 1].scatter(x_tr[tr_idx[1], :num_context], y_tr[tr_idx[1], :num_context], c = 'black', marker = "o", zorder = 1, s= 25, label = 'context points')
    axs[0, 1].plot(x_tr[tr_idx[1], sorted_idx_tr2], samples_tr[1, sorted_idx_tr2], c = 'lightskyblue', alpha = 0.6, label = 'reconstructed function')
    axs[0, 1].set_title('Training ex. II')
    axs[1, 0].plot(x_te[te_idx[0], sorted_idx_te], y_te[te_idx[0], sorted_idx_te], 'black')
    axs[1, 0].scatter(x_te[te_idx[0], :num_context], y_te[te_idx[0], :num_context], c = 'black', marker = "o", zorder = 1, s= 25)
    axs[1, 0].plot(x_te[te_idx[0], sorted_idx_te], samples_te[0, sorted_idx_te], c = 'lightskyblue', alpha = 0.6)
    axs[1, 0].set_title('Test ex. I')
    axs[1, 1].plot(x_te[te_idx[1], sorted_idx_te2], y_te[te_idx[1], sorted_idx_te2], 'black')
    axs[1, 1].scatter(x_te[te_idx[1], :num_context], y_te[te_idx[1], :num_context], c = 'black', marker = "o", zorder = 1, s= 25)
    axs[1, 1].plot(x_te[te_idx[1], sorted_idx_te2], samples_te[1, sorted_idx_te2], c = 'lightskyblue', alpha = 0.6)
    axs[1, 1].set_title('Test ex. II')
    for ax in axs.flat:
        ax.label_outer()
    plt.show()