import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
plt.style.use('ggplot')

def sample_plot_w_training(positions, targets, predictions, num_context = 50, num_samples = 1, title = ''):
    real_x = positions
    real_y = targets
    samples = np.zeros((num_samples, len(real_x)))
    samples[0, :(num_context - 1)] = targets[:(num_context - 1)]
    samples[0, (num_context - 1):] = predictions[(num_context - 1):]
    sorted_arr = np.argsort(real_x)
    plt.plot(real_x[sorted_arr], real_y[sorted_arr], 'black')
    plt.scatter(real_x[:num_context], real_y[:num_context], c = 'black', marker = "o", zorder = 1, s= 25)
    plt.plot(real_x[sorted_arr], samples[0, sorted_arr], c = 'lightskyblue', alpha = 0.6)
    plt.title(title)
    plt.show()

# Show few graphs of how the data looks like
def plot_examples(x, y):
    idx = np.random.choice(np.arange(0, len(x)), 5, replace = False)
    for i in idx: 
        sorted_idx = np.argsort(x[i, :])
        plt.plot(x[i, sorted_idx], y[i, sorted_idx])
    plt.title('Five examples from the dataset generated by a GP \n with RBF kernel with Ïƒ = 1')


def choose_random_ex_n_sort(x, num_samples):

    idx = np.random.choice(np.arange(0, len(x)), num_samples, replace = False)
    samples = np.zeros((num_samples, x.shape[1]))
    sorted_idx_samples = pd.DataFrame(x[idx, :]).apply(lambda x: np.argsort(x), axis = 1)  
    # print(np.array(sorted_idx_samples)[0, :])
    return idx, samples, sorted_idx_samples

def assign_context_points_to_preds(idx, samples, y, pred, num_context):
    samples[:, :num_context] =  y[idx, :num_context]
    samples[:, num_context:] =  pred.numpy()[idx, (num_context - 1):]
    return samples


def follow_training_plot(x_tr, y_tr, pred, 
                         x_te, y_te, pred_te, num_context = 50, num_samples = 2):
    fig, axs = plt.subplots(2, 2, figsize=(10,6))
    custom_xlim = (4, 16); custom_ylim = (-4, 4)

# Setting the values for all axes.
    plt.setp(axs, xlim=custom_xlim, ylim=custom_ylim)
    idx_tr, samples_train, sorted_idx_tr = choose_random_ex_n_sort(x_tr, 2) 
    idx_te, samples_test, sorted_idx_te = choose_random_ex_n_sort(x_te, 2) 
    samples_tr = assign_context_points_to_preds(idx_tr, samples_train, y_tr, pred, num_context)
    samples_te = assign_context_points_to_preds(idx_te, samples_test, y_te, pred_te, num_context)
    axs = plot_subplot_training(axs, x_tr, x_te, y_tr, y_te, samples_tr, samples_te, idx_tr, idx_te, np.array(sorted_idx_tr), np.array(sorted_idx_te), num_context)
    for ax in axs.flat:
        ax.label_outer()
    
    plt.show()

def plot_subplot_training(params, x, x_te, y, y_te, pred_y, pred_y_te, tr_idx, te_idx, sorted_idx_tr, sorted_idx_te, num_context):
    
    for row in range(params.shape[0]):
        if (row == 1):
            x = x_te; y = y_te; pred_y = pred_y_te; tr_idx = te_idx; sorted_idx_tr = sorted_idx_te
        for col in range(params.shape[1]):

            params[row, col].plot(x[tr_idx[col], sorted_idx_tr[col, :]], y[tr_idx[col], sorted_idx_tr[col, :]], c = 'black', label = 'true function')
            params[row, col].scatter(x[tr_idx[col], :num_context], y[tr_idx[col], :num_context], c = 'black', marker = "o", zorder = 1, s= 25, label = 'context points')
            params[row, col].plot(x[tr_idx[col], sorted_idx_tr[col, :]], pred_y[col, sorted_idx_tr[col, :]], c = 'lightskyblue', label = 'reconstructed function')
            if (row == 0):
                params[row, col].set_title('Training ex. {}'.format(col + 1))
            else: 
                params[row, col].set_title('Test ex. {}'.format(col + 1))
            if ((row == 0) and (col == 1)):
                params[row, col].legend()
    return params